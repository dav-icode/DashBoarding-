generator client {
  provider      = "prisma-client-js"
  engineType    = "binary"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// NEXTAUTH MODELS (para autenticação)
// ========================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ========================================
// APPLICATION MODELS (seus dados)
// ========================================

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  resetToken        String?   @unique 
  resetTokenExpiry  DateTime?           
  createdAt         DateTime  @default(now())
  
  accounts          Account[]
  sessions          Session[]
  clients           Client[]
  sales             Sale[]
}

model Client {
  id        String    @id @default(cuid())
  name      String
  email     String?   @unique
  phone     String?
  company   String?
  createdAt DateTime  @default(now())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  projects  Project[]
}

enum ProjectStatus {
  Planning
  InProgress
  Completed
}

model Task {
  id          String   @id @default(cuid())
  nome        String
  descricao   String?
  status      String   // "todo", "doing", "review", "done"
  prioridade  String   // "alta", "media", "baixa"
  projetoId   String
  projeto     Project  @relation(fields: [projetoId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      String   @default("In Progress")
  price       Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id])
  sales       Sale[]
  startDate    DateTime?
  deadline     DateTime?
  completedAt  DateTime?
  progress     Int?       @default(0)
  estimatedHours Float?
  workedHours    Float?
  tasks      Task[] 
}


model Sale {
  id          String   @id @default(cuid())
  amount      Float
  date        DateTime @default(now())
  description String?
  method      String?
  projectId   String?
  userId      String
  project     Project? @relation(fields: [projectId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}